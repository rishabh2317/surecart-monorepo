generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  authProviderId  String           @unique
  username        String           @unique
  email           String           @unique
  profileImageUrl String?
  tier            String           @default("free")
  createdAt       DateTime         @default(now())
  role            String           @default("SHOPPER")
  fullName        String?
  instagramHandle String?
  phone           String?
  brands          Brand[]
  collections     Collection[]
  views           CollectionView[]
  comments        Comment[]
  coupons         Coupon[]
  followers       Follow[]         @relation("Following")
  following       Follow[]         @relation("Followers")
  transactions    Transaction[]
  likes           UserLikes[]
}

model Brand {
  id           String    @id @default(uuid())
  name         String    @unique
  websiteUrl   String?
  affiliateTag String?
  createdAt    DateTime  @default(now())
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
  products     Product[]
}

model Product {
  id              String              @id @default(uuid())
  source          String
  sourceProductId String
  name            String
  description     String?
  imageUrls       String[]
  baseUrl         String
  brandId         String?
  price           Float?
  currency        String?
  lastUpdatedAt   DateTime            @default(now()) @updatedAt
  clicks          Click[]
  collections     CollectionProduct[]
  brand           Brand?              @relation(fields: [brandId], references: [id])
  @@index([name, description])
}

model Collection {
  id            String              @id @default(uuid())
  userId        String
  name          String
  slug          String
  createdAt     DateTime            @default(now())
  coverImageUrl String?
  description   String?
  clicks        Click[]
  user          User                @relation(fields: [userId], references: [id])
  products      CollectionProduct[]
  views         CollectionView[]
  comments      Comment[]
  likedBy       UserLikes[]
  @@index([name, description])
}

model CollectionProduct {
  collectionId String
  productId    String
  displayOrder Int
  creatorNote  String?
  collection   Collection @relation(fields: [collectionId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@id([collectionId, productId])
}

model Click {
  id           BigInt     @id @default(autoincrement())
  collectionId String
  productId    String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model UserLikes {
  userId       String
  collectionId String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, collectionId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Comment {
  id           String     @id @default(uuid())
  text         String
  userId       String
  collectionId String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id          String   @id @default(uuid())
  userId      String
  code        String   @unique
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  type        String
  status      String
  amount      Float
  currency    String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CollectionView {
  id           String     @id @default(uuid())
  collectionId String
  userId       String?
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id])
}
